name: Pull requiest tests

on:
  pull_request:
    branches:
      - develop

env:
  NX_BRANCH: ${{ github.head_ref || github.ref_name }}
  NX_CLOUD_DISTRIBUTED_EXECUTION: false # this enables DTE
  NX_CLOUD_DISTRIBUTED_EXECUTION_AGENT_COUNT: 0 # expected number of agents
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  NX_CLOUD_AUTH_TOKEN: ${{ secrets.NX_CLOUD_AUTH_TOKEN }}

jobs:
  main:
    name: Main Job
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3
        with:
          # By default, PRs will be checked-out based on the Merge Commit, but we want the actual branch HEAD.
          ref: ${{ github.event.pull_request.head.sha }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v3

      # Set node/npm/yarn versions using volta
      - uses: volta-cli/action@v4
        with:
          package-json-path: '${{ github.workspace }}/package.json'

      - name: Print node/npm versions
        id: versions
        run: |
          node_ver=$( node --version )

          echo "Node: ${node_ver:1}"
          echo "NPM: $( npm --version )"

          echo "node_version=${node_ver:1}" >> $GITHUB_OUTPUT

      - name: Use the package manager cache if available
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-

      - name: Install dependencies
        run: npm ci

      - name: Install awslocal
        run: pip install awscli-local

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Run commands in parallel
        run: |
          pids=()
          npx nx format:check &
          pids+=($!)

          npx nx affected -t lint --parallel=3 &
          pids+=($!)

          npx nx affected -t test --parallel=3 --ci --coverage --passWithNoTests &
          pids+=($!)

          npx nx affected -t build --parallel=3 &
          pids+=($!)

          npm run e2e &
          pids+=($!)

          # run all commands in parallel and bail if one of them fails
          for pid in ${pids[*]}; do
            if ! wait $pid; then
              exit 1
            fi
          done

          exit 0

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          flags: cdk,create-aws-cdk-app,nx-aws-cdk
          files: '!./.nx'
          directory: coverage
          fail_ci_if_error: true
          verbose: true
